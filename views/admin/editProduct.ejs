
<%- include('../../partials/adminHeader')-%>

    
      <!-- Include SweetAlert 2 CSS and JS -->
        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css">
        <style>
            .selected-image {
                width: 100px; /* Adjust the size as needed */
                height: auto;
                margin: 5px;
            }
        </style>


<body>
    <div class="screen-overlay"></div>
<%- include('./aside')-%>


    <main class="main-wrap">
<%- include('../../partials/adminNavbar')-%>
        
        <section class="content-main">
            <form method="post" enctype="multipart/form-data">
            <div class="row">
                <div class="col-9">
                    <div class="content-header">
                        <h2 class="content-title">Edit Product</h2>
                        <div>
                            <input type="submit" value="Submit" onclick="validateForm()" class="btn btn-md rounded font-sm hover-up">
                        </div>
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="card mb-4">
                        <div class="card-header">
                            <h4>Add the details</h4>
                        </div>
                            <div class="card-body">
                                <div class="mb-4">
                                    <label for="product_name" class="form-label">Product title</label>
                                    <input type="text" name="name" placeholder="Type here" value="<%= product.name %>" class="form-control" id="product_name" required oninput="validateField(this)">
                                    <div class="text-danger" id="nameError"></div>
                                </div>
                                <div class="mb-4">
                                    <label class="form-label">Full description</label>
                                    <textarea placeholder="Type here" name="description" class="form-control" rows="4"  oninput="validateField(this)" required><%= product.description %></textarea>
                                    <div class="text-danger" id="descriptionError"></div>
                                </div>
                                <div class="row">
                                    <div class="col-lg-4">
                                        <div class="mb-4">
                                            <label class="form-label">Regular price</label>
                                            <div class="row gx-2">
                                                <input placeholder="₹" name="regularPrice" type="number" min="1" value="<%= product.regularPrice %>" class="form-control"oninput="validateField(this)">
                                                <div class="text-danger" id="regularPriceError"></div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-lg-4">
                                        <div class="mb-4">
                                            <label class="form-label">Promotional price</label>
                                            <input placeholder="₹" type="number" name="salePrice" min="1" value="<%= product.salePrice %>"  class="form-control" oninput="validateField(this)">
                                            <div class="text-danger" id="salePriceError"></div>
                                        </div>
                                    </div>
                                    <!-- To indicate which sweet alert should work -->
                                    <span hidden id="statusSpan"><%= locals.message ? message : '' %></span>
                                    <div class="col-lg-4">
                                        <label class="form-label">Category</label>
                                        <select class="form-select" name="categories" oninput="validateField(this)">
                                            <option selected  ><%=categoryname.name %> </option>
                                            <% if( categories.length > 0 ) { for( let i = 0 ; i < categories.length ; i++){ %>
                                              <% if( categories[i].isActive) { %>
                                            <option> <%= categories[i].name%> </option>
                                            <% } %>
                                               
                                            
                                        <% } } else{ %> user not found <% } %>
                
                                        </select>
                                        <div class="text-danger" id="categoriesError"></div>
                                    </div>
                                </div>
                                <div class="mb-4">
                                    <label class="form-label">Stock</label>
                                    <input type="number" name="stock"  value="<%=product.stock %>" placeholder="%" class="form-control" id="product_name" min="0" required oninput="validateField(this)">
                                    <div class="text-danger" id="stockError"></div>
                                </div>
                                <input type="hidden" name="deletedImages" id="deletedImagesInput" value="">
                                <input type="submit" value="Submit" onclick="validateForm()" class="btn btn-md rounded font-sm hover-up">
                            
                           
                        </div>
                    </div> <!-- card end// -->
                   
                    
                     <!-- card end// -->
                </div>
                <div class="col-lg-3">
                    <div class="card mb-4">
                        <div class="card-header">
                            <h4>Media</h4>
                        </div>
                        <div class="card-body">
                            <label for="imageUpload" class="input-upload">
                                <div id="imagePreviewContainer">
                                    <% for (let i = 0; i < product.image.length; i++) { %>
                                        <div class="image-preview-item">
                                            <img src="/static/admin/images/product/<%= product.image[i] %>" data-deletedImage="<%= product.image[i] %>" alt="Product Image" >
                                            <button type="button" class="btn btn-sm btn-danger" onclick="deleteImage(this)">Delete</button>
                                        </div>
                                        
                                    <% } %>
                                </div>
                                <input id="imageUpload" class="form-control" name="image" type="file" multiple accept="image/*">
                             
                            </label>
                            <div id="selectedImagesContainer"></div>
                        </div>
                        
                    </div> <!-- card end// -->
                    
                </div>
                <div id="image-preview-container"></div>
            </div>
        </form>
        </section> <!-- content-main end// -->

        <%- include('../../partials/adminFooter')-%>

<script>



    let deletedImageNames = []; // Initialize an array to store deleted image names

// Example function to retrieve the image name associated with a container
function getImageName(imageContainer) {
    const attributeName = 'data-deletedImage';
    const image = imageContainer.querySelector('img');
    return image ? image.getAttribute(attributeName) || '' : '';
}

function deleteImage(buttonElement) {
    // Get the parent container of the button (assuming the button is inside a container div)
    const imageContainer = buttonElement.closest('.image-preview-item');

    // Check if the container exists before attempting to remove it
    if (imageContainer) {
        // Retrieve the image name associated with the container
        const imageName = getImageName(imageContainer);

        // Store the image name in the array
        deletedImageNames.push(imageName);

        updateDeletedImagesInput(deletedImageNames)
        // Remove the entire container div
        imageContainer.parentNode.removeChild(imageContainer);

        // Log the array of deleted image names
        console.log('Deleted Image Names:', deletedImageNames);
        console.log('Deleted Image Names:', imageName);
    }
}


function updateDeletedImagesInput(deletedImg) {
    // Update the value of the hidden input field with the JSON string of deletedImages
    const deletedImagesInput = document.getElementById('deletedImagesInput');
    deletedImagesInput.value = JSON.stringify(deletedImg);
}

</script>

<script>
    const input = document.getElementById("imageUpload");
    const previewContainer = document.getElementById("selectedImagesContainer");
    
    input.addEventListener("change", () => {
      // Clear existing previews
      previewContainer.innerHTML = '';
    
      // Convert the FileList object to an array
      const fileListArr = Array.from(input.files);
    
      // Remove the second file from the array
    //   fileListArr.splice(1, 1);
    
      // Create and append img elements and buttons for each file
      fileListArr.forEach((file, index) => {
        console.log("for each")
        const img = document.createElement('img');
        console.log("for each 1")
        img.src = URL.createObjectURL(file);
        console.log("for each 9")

        img.alt = file.name;
        console.log("for each 2")

        img.style.maxWidth = '100px'; // Set a maximum width for preview
        console.log("for each 3")

        previewContainer.appendChild(img);
        console.log("for each 3")
    
        const button = document.createElement('button');
        button.textContent = 'Remove';
        button.addEventListener('click', () => {
            console.log("Remove button worked")
          // Remove the corresponding file from the array
          fileListArr.splice(index, 1);
          console.log("file after splice",fileListArr)
          // Re-render the previews after removing the file
          input.dispatchEvent(new Event('change'));
            // Create a new FileList object
      const newFileList = new DataTransfer();
    
    // Add the remaining files to the new FileList
    fileListArr.forEach((file) => {
      newFileList.items.add(file);
    });
    
    // Set the new FileList to the input element
    input.files = newFileList.files;
    console.log("modified array ",newFileList);

        });
        previewContainer.appendChild(button);
      });
    
      // Log the modified array to the console
      console.log("modified array ",fileListArr);
    //   console.log("modified array ",newFileList);
    });
    </script>

<script>

function validateField(element) {
        const fieldName = element.name;
        const fieldValue = element.value;
        const errorElement = document.getElementById(`${fieldName}Error`);

        if (!fieldValue.trim()) {
            errorElement.textContent = "This field is required.";
        } else {
            errorElement.textContent = "";

            // Additional validation for sale price greater than regular price
            if (fieldName === "salePrice") {
                const regularPrice = document.querySelector("[name='regularPrice']").value;
                if (parseFloat(fieldValue) > parseFloat(regularPrice)) {
                    errorElement.textContent = "Sale price cannot be greater than regular price.";
                }
            }
        }
}
    function validateForm() {
        const productName = document.querySelector("[name='name']").value;
        const description = document.querySelector("[name='description']").value;
        const regularPrice = document.querySelector("[name='regularPrice']").value;
        const salePrice = document.querySelector("[name='salePrice']").value;
        const category = document.querySelector("[name='categories']").value;
        const stock = document.querySelector("[name='stock']").value;

        // Reset previous warning messages
        resetWarnings();

        // Simple validation, you can add more specific checks as needed
        let isValid = true;

        if (!productName.trim()) {
            displayWarning("[name='name']", "Please enter the product title.");
            isValid = false;
        }

        if (!description.trim()) {
            displayWarning("[name='description']", "Please enter the product description.");
            isValid = false;
        }

        if (!regularPrice.trim()) {
            displayWarning("[name='regularPrice']", "Please enter the regular price.");
            isValid = false;
        }

        if (!salePrice.trim()) {
            displayWarning("[name='salePrice']", "Please enter the promotional price.");
            isValid = false;
        }

        if (!category.trim()) {
            displayWarning("[name='categories']", "Please choose a category.");
            isValid = false;
        }

        if (!stock.trim()) {
            displayWarning("[name='stock']", "Please enter the stock.");
            isValid = false;
        }

        return isValid;
    }

    function displayWarning(selector, message) {
        const element = document.querySelector(selector);
        const warningMessage = document.createElement("div");
        warningMessage.className = "text-danger";
        warningMessage.textContent = message;

        element.parentNode.appendChild(warningMessage);
    }

    function resetWarnings() {
        const warningMessages = document.querySelectorAll(".text-danger");
        warningMessages.forEach(function (warning) {
            warning.parentNode.removeChild(warning);
        });
    }
</script>




 <script>
          
  // Get the value of the span tag
  const spanValue = document.getElementById('statusSpan').innerText;
console.log(spanValue)

if(spanValue === '3'){
    Swal.fire({
    icon: 'warning',
    title: 'Some error occured',
    // text: errorMessage,
  });
  document.getElementById('statusSpan').innerText = 'none';

}
if (spanValue === '1') {
  // Trigger SweetAlert
  Swal.fire({
    icon: 'warning',
    title: 'Already Exist',
    text: 'Product Already Exist !',
  });
  document.getElementById('statusSpan').innerText = 'none';


}
// Check if the value is 2
if (spanValue === '2') {
  // Trigger SweetAlert
  Swal.fire({
    icon: 'success',
    title: 'Success',
    text: 'Product added Sucessfully',
  });
  document.getElementById('statusSpan').innerText = 'none';


}
  