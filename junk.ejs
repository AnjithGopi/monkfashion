<script>
    // This function will be executed when the window finishes loading
    window.onload = function() {
      // Call your function or perform actions here
      calculateTotalAmount();
    };
// Function to update the quantity in the UI
function updateQuantityUI(index, action) {
const quantityElement = document.getElementById(`quantity${index}`);
const subtotalElement = document.getElementById(`subtotal${index}`);
const priceElement = document.getElementById(`salePrice${index}`);

let quantity = parseInt(quantityElement.innerText);

if (action === 'increase') {
    quantity++;
} else if (action === 'decrease' && quantity > 1) {
    quantity--;
}

quantityElement.innerText = quantity;
subtotalElement.innerText = (parseFloat(priceElement.value) * quantity).toFixed(2);

updateTotal(); // Assuming you have a function to update the total
}
// Function to update the quantity in the database
async function updateQuantityInDatabase(cartId, productId, newQuantity) {
try {
    // Perform the logic to update the quantity in the database
    const response = await fetch(`/updateQuantity/${cartId}/${productId}/${newQuantity}`, {
        method: 'POST'
    });

    const updatedCartData = await response.json();

    // Update the total cart value
    document.getElementById('totalCartValue').textContent = '$' + updatedCartData.product.reduce((total, p) => total + (p.quantity * p.productId.salePrice), 0).toFixed(2);
} catch (error) {
    console.error('Error updating quantity in the database:', error);
}
}

    
    //Function to update the quantity in the database
    async function updateQuantity(index,action) {
        const quantityElement = document.getElementById(`quantity${index}`);
        const subtotalElement = document.getElementById(`subtotal${index}`);
        const price = document.getElementById(`salePrice${index}`)

        let quantity = parseInt(quantityElement.innerText);
        if(action === 'increase'){
            quantity++
        }else if(action == 'decrease' && quantity > 1){
            quantity--;
        }

        await fetch(`/updateQuantity/${quantity}/${index}/`,{
            method:'POST'
        })

        quantityElement.innerText = quantity;

        subtotalElement.innerText = (price.value * quantity).toFixed(2);
        updateTotal();
        try {

            // Perform the logic to update the quantity in the database
            const response = await fetch(`/updateQuantity/${cartId}/${productId}/${newQuantity}`);
            const updatedCartData = await response.json();

            // Update the UI to reflect the updated quantity
            document.getElementById('quantity_' + productId).textContent = newQuantity;

            // Update the total amount for the current product
            const totalAmount = (newQuantity * parseFloat(salePrice)).toFixed(2);
            document.getElementById('totalAmount_' + productId).textContent = '$' + totalAmount;

            // Update the total cart value
            document.getElementById('totalCartValue').textContent = '$' + updatedCartData.product.reduce((total, p) => total + (p.quantity * p.productId.salePrice), 0).toFixed(2);
        } catch (error) {
            console.error('Error updating quantity:', error);
        }
    }


    // // Function to update the quantity in the database
    // async function updateQuantity(cartId, productId, newQuantity, salePrice) {
    //     try {
    //         // Perform the logic to update the quantity in the database
    //         const response = await fetch(`/updateQuantity/${cartId}/${productId}/${newQuantity}`);
    //         const updatedCartData = await response.json();

    //         // Update the UI to reflect the updated quantity
    //         document.getElementById('quantity_' + productId).textContent = newQuantity;

    //         // Update the total amount for the current product
    //         const totalAmount = (newQuantity * parseFloat(salePrice)).toFixed(2);
    //         document.getElementById('totalAmount_' + productId).textContent = '$' + totalAmount;

    //         // Update the total cart value
    //         document.getElementById('totalCartValue').textContent = '$' + updatedCartData.product.reduce((total, p) => total + (p.quantity * p.productId.salePrice), 0).toFixed(2);
    //     } catch (error) {
    //         console.error('Error updating quantity:', error);
    //     }
    // }
  </script>



<a href="#" class="qty-up" onclick="updateQuantity('<%= i %>', 'decrease'); updateQuantityInDatabase('<%= cart[0]._id %>', '<%= cart[0].product[0].productId %>', '<%= cart[0].product[0].quantity - 1 %>')"><i class="fi-rs-angle-small-up"></i></a>




<% let totalCartValue = 0; %>
<% if(cart[0].product.length> 0){ for(let i=0 ;i < cart[0].product.length ; i++){
    %>
  
        <td class="image product-thumbnail"><img src="/static/admin/images/product/<%=cart[0].product[i].productId.image[0] %>" alt="#"></td>
        <td class="product-des product-name">
            <h5 class="product-name"><a href="shop-product-right.html"><%=cart[0].product[i].productId.name %></a></h5>
            <p class="font-xs"><%=cart[0].product[i].productId.regularPrice %><br> 
            </p>
        </td>
        <td class="price" data-title="Price"><span> <%=cart[0].product[i].productId.salePrice %> </span></td>
      
        <td class="text-center" data-title="Stock">
            
            <div class="detail-qty border radius  m-auto">
            <div class=" d-flex flex-row ">
                
                <!-- <a href="#" class="qty-down" onclick=""><i class="fi-rs-angle-small-down"></i></a> -->
                <button class="left btn btn-white border border-secondary px-3" type="button" id="decrementButton" data-mdb-ripple-color="dark" onclick="changeQuantity('<%=cart[0].product[i].productId._id%>' , '<%=cart[0].proId%>',-1)">
                    -
                    </button>
                <span class="qty-val"> <%=cart[0].product[i].quantity %> </span>
                <button class="left btn btn-white border border-secondary px-3" type="button" id="incrementButton" data-mdb-ripple-color="dark" onclick="changeQuantity('<%=cart[0].product[i].productId._id%>' , '<%=cart[0].proId%>' ,1)">
                    +
                    </button>                                                  
                <!-- <a href="#" class="qty-up" onclick="updateQuantityUI('<%=cart%>', 'increase')"> <i class="fi-rs-angle-small-up"></i> </a> -->
                <!-- <a href="#" class="qty-up"><i class="fi-rs-angle-small-up"></i></a> -->

            </div>
        </div>
        </td>
        <td class="text-right" data-title="Cart">
           <!-- <a onload="" id="priceLink"> <span> </span></a> -->
           <span id="totalAmount_<%= i %>">$<%= (cart[0].product[i].quantity * cart[0].product[i].productId.salePrice).toFixed(2) %></span>
        </td>
        <td class="action" data-title="Remove"><a href="#" class="text-muted"><i class="fi-rs-trash"></i></a></td>
        <% totalCartValue += cart[0].product[i].quantity * cart[0].product[i].productId.salePrice; %>

    </tr>
<% } } else {  %>
        <p>Not found</p>
    <%} %>



    /./. cart button 
    <div class="d-flex flex-row">
        <button class="left btn btn-white border border-secondary px-3" type="button" id="decrementButton_<%= i %>" data-mdb-ripple-color="dark" onclick="changeQuantity('<%=cart[0].product[i].productId._id%>' ,  '<%=cart[0].product[i].quantity%>', -1, '<%= i %>')">
            -
        </button>
        <span class="qty-val" id="qty_val_<%= i %>"><%=cart[0].product[i].quantity %></span>
        <button class="left btn btn-white border border-secondary px-3" type="button" id="incrementButton_<%= i %>" data-mdb-ripple-color="dark" onclick="changeQuantity('<%=cart[0].product[i].productId._id%>' , '<%=cart[0].product[i].quantity%>' , 1, '<%= i %>')">
            +
        </button>
    </div>

Aggreagtion Lookup 
    const cart = await User.aggregate([
            {
              $lookup: {
                from: "carts",
                localField: "cart",
                foreignField: "_id",
                as: "cartData"
              }
            }
          ])
          console.log("cart",cart)
          console.log("cartData",cart.cartData)


          <% order.items.forEach(item => { %>
            <div>
                <p>Product ID: <%= item.productId._id %></p>
                <p>Product Name: <%= item.productId.name %></p>
                <p>Quantity: <%= item.quantity %></p>
                <!-- Add more product details as needed -->
            </div>
        <% }); %>




        function placeOrder() {
       
            const paymentForm = document.getElementById('myForm');
    
            // Find the selected radio button
            const selectedRadioButton = paymentForm.querySelector('input[name="payment_option"]:checked');
            const selectedRadioButtonAddress = paymentForm.querySelector('input[name="address"]:checked');
    
            // Check if a radio button is selected
            if (selectedRadioButton) {
                const selectedValuePayment = selectedRadioButton.value;
                const selectedValueAddress = selectedRadioButtonAddress.value;
                console.log('Selected Payment Option:', selectedValuePayment);
                console.log('Selected Address:', selectedValueAddress);
                Swal.fire({
                    title: 'Placed Order',
                    text: 'Are you sure to place the order ?',
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#088178',
                    cancelButtonColor: '#d33',
                    confirmButtonText: 'Place Order'
                    }).then((result) => {
                    if (result.isConfirmed) {
                        // Handle the confirmed action here
                  
    
            fetch('/home/cart/checkout/placeorder', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        addressIndex: selectedValueAddress,
                        paymentMethod: selectedValuePayment,
                        
                    }),
                })
                .then(response => response.json())
                .then(data => {
                    console.log("got the response of...")
                    // location.reload();
                  
                    if( data.warningMessage){
                         toastr.warning(data.warningMessage);
    
                     }
                     if (data.success) {
        // console.log("Success worked");
        // console.log(data.key_id);
        // console.log(data.orderData);
        // console.log("total amount",data.orderData.totalAmount);
        // console.log(typeof(data.orderData.totalAmount));
        // console.log("order id",data.orderData.orderId);
        // console.log(typeof(data.orderData.totalAmount));
                        const amount = JSON.stringify(data.orderData.totalAmount)*100;
                        console.log(amount)
                        console.log(typeof(amount))
                        var options = {
                            "key":""+data.key_id+"",
                            "amount":data.totalAmount,
                            "currency": "INR",
                            "name": "Monk Fashion",
                            "description": "Test Transaction",
                            "image": "https://example.com/your_logo",
                            "order_id":data.orderData.orderId,
                            "handler": function (status) {
                                toastr.success("Payment Success");
                                Swal.fire({
                                                title: 'Sucess',
                                            
                                                icon: 'success',
                                                confirmButtonText: 'Close',
                                                }).then((result) => {
                                                    // Check if the alert was confirmed
                                                    console.log("redirect 1")
    
                                                    if (result.isConfirmed) {
                                                        Swal.close();
                                                        console.log("redirect2")
                                                        // Redirect to the home page
                                                        window.location.href = '/home'; // Change this to the actual URL of your home page
                                                        console.log("redirect3")
                                                        // window.location.href = '/login'
                                                        console.log("redirect3")
    
                                                    }
                                                });
                            },
                            "prefill": {
                                "name": "Abhilash V S",
                                "email": "abhilash@example.com",
                                "contact": "9000090000"
                            },
                            "notes": {
                                "address": "Razorpay Corporate Office"
                            },
                            "theme": {
                                "color": "#3399cc"
                            }
                        };
    
                        var rzp1 = new Razorpay(options);
    
                        rzp1.on('payment_failed', function (data) {
                            alert("Payment failed");
                        });
    
                        rzp1.open();
    
    
                        //  toastr.success(data.successMessage);
                        //  Swal.fire({
                        //         title: 'Invoice',
                        //         html: `
                        //             <div style="text-align: left;">
                        //             <p><strong>OrderId:</strong> ${data.orderData.orderId}</p>
                        //             <p><strong>Payment Status:</strong>  ${data.orderData.paymentStatus}</p>
                        //             <p><strong>Payment Method:</strong>  ${data.orderData.paymentMethod}</p>
                                    
                        //             <hr>
                        //             <p><strong>Total:</strong> ${data.orderData.totalAmount}</p>
                        //             </div>
                        //         `,
                        //         icon: 'success',
                        //         confirmButtonText: 'Close',
                        //         }).then((result) => {
                        //             // Check if the alert was confirmed
                        //             console.log("redirect 1")
    
                        //             if (result.isConfirmed) {
                        //                 Swal.close();
                        //                 console.log("redirect2")
                        //                 // Redirect to the home page
                        //                 window.location.href = '/home'; // Change this to the actual URL of your home page
                        //                 console.log("redirect3")
                        //                 // window.location.href = '/login'
                        //                 console.log("redirect3")
    
                        //             }
                        //         });
    
                     } else{
                        alert('FAILEDD')
                     }
    
                })
                .catch(error => {
                    console.error('Error updating quantity:', error);
                });
             
                    } else {
                        // Handle the canceled action here
                        Swal.fire('Cancelled', 'Order cancelled sucessfully ', 'info');
                    }
                    });
                
            }
        }




        // Function to add Product to the cart
const addToCart = async (req, res) => {
    try {
        const productId = req.params.id;
        const userId = req.session.user_id;
        console.log(productId);
        const productData = await Product.find();
        const currentProductData = await Product.findById(productId)
        const cartUser = await Cart.findOne({ userId: req.session.user_id });
        console.log("session ID", req.session.user_id);
        console.log("Cart Data checking ", cartUser);
        console.log("Current product data :",currentProductData)
        // console.log("Product id In the cart  ;",cartUser.product[0].productId)
        if( currentProductData.stock > 0){
        if (cartUser) {
            // const productInCart = await cartUser.product({productId:productId})
            const productInCart = await Cart.find({
                userId: userId,
                product: { $elemMatch: { productId: productId } },
            });
            if (productInCart.length > 0 ) {
                console.log("product alerady exist in the cart:", productInCart);
                const result = await Cart.updateOne(
                    { userId: userId, "product.productId": productId },
                    { $inc: { "product.$.quantity": 1 } }
                );
                console.log(result);
                let message = 'Product quantity increased in cart successfully!';
                const productData = await Product.find()
                const cartCount = await Cart.find({ userId: req.session.user_id });


                res.status(200).render('index', { product: productData, message: message ,cartQuantity:cartCount[0].product.length || 0});

            } else {
                console.log("not in the cart");
                const result = await Cart.updateOne(
                    { userId: userId },
                    { $push: { product: { productId: productId, quantity: 1 } } }
                );
                console.log(result);
                let message = 'Product added to cart successfully!';
                const productData = await Product.find()
                const cartCount = await Cart.find({ userId: req.session.user_id });

                res.status(200).render('index', { product: productData, message: message,cartQuantity:cartCount[0].product.length || 0});

            }
        } else {
            console.log("New cart Created");
            const newCart = new Cart({
                userId: req.session.user_id,
                product: [
                    {
                        productId: productId,
                        quantity: 1,
                    },
                ],
            });
            const cartData = await newCart.save();

            if (cartData) {
                console.log("Added to cart sucessfully ");
                // console.log("Added to cart sucessfully ", cartData);
                // const userData = await User.findById(userId)

                const result = await User.updateOne(
                    { _id: userId },
                    { $set: { cart: cartData._id } }
                );

                if (result) {
                    console.log("Cart Id added to User Sucessfully ")
                }
                let message = 'Product added to cart successfully!';
                const productData = await Product.find()

                let cartCount = 0
                const cartData1 = await Cart.find({userId:req.session.user_id});
                // console.log("cart data",cartData1)
                console.log("........................................")
                if(cartData1.length > 0){
                    // console.log("cc",cartData1[0].product.length)

                    cartCount = cartData1[0].product.length
                }

                res.status(200).render('index', { product: productData, message: message,cartQuantity:cartCount });

            } else {
                let message = 'Failed to add to the cart ';

                res.status(500).render('index', { product: productData, warningMessage: message, cartQuantity: 0});

            }
        }
    }else{
        let message = 'Product Out of stock ';

        res.status(500).render('index', { product: productData, warningMessage: message, cartQuantity: 0});
    }
    } catch (error) {
        console.log(error.message);
    }
};




////// search sales report

const orderData = await Order.aggregate([
{
    $match: {
        $or: [
            { orderId: { $regex: '.*' + search + '.*', $options: 'i' } },
            { totalAmount: { $eq: parseFloat(search) } }
        ]
    }
},
{
    $lookup: {
        from: 'users',
        localField: 'userId',
        foreignField: '_id',
        as: 'userDetails'
    }
},
{
    $unwind: '$userDetails'
},
{
    $lookup: {
        from: 'products',
        localField: 'items.productId',
        foreignField: '_id',
        as: 'productDetails'
    }
},
{
    $unwind: '$productDetails'
},
{
    $sort:{
        orderDate:-1
    }
}

  

]);


const orderCounts = getSalesReportCounts(orderData)
// console.log("SlaesData :",orderCounts)
// const k =  await Order.find().populate("i.productId")


res.render("salesReport",{orders:orderData,users:userCount,totalOrders:orderData.length,onlinePayments:orderCounts.filterPaymentOnline,offlinePayments:orderCounts.filterPaymentOffline,cancelledOrders:orderCounts.filterOrderCancelled,totalAmount:orderCounts.totalSum})
